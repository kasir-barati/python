# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import greet_pb2 as greet__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in greet_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GreetServiceStub(object):
    """A class to show you how you can greet someone.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GreetMe = channel.unary_unary(
                '/greet.GreetService/GreetMe',
                request_serializer=greet__pb2.GreetMeRequest.SerializeToString,
                response_deserializer=greet__pb2.GreetMeResponse.FromString,
                _registered_method=True)
        self.SubscribeToNotifications = channel.unary_stream(
                '/greet.GreetService/SubscribeToNotifications',
                request_serializer=greet__pb2.SubscribeToNotificationsRequest.SerializeToString,
                response_deserializer=greet__pb2.SubscribeToNotificationsResponse.FromString,
                _registered_method=True)
        self.UserActions = channel.stream_unary(
                '/greet.GreetService/UserActions',
                request_serializer=greet__pb2.UserActionsRequest.SerializeToString,
                response_deserializer=greet__pb2.UserActionsResponse.FromString,
                _registered_method=True)
        self.FileUpload = channel.stream_stream(
                '/greet.GreetService/FileUpload',
                request_serializer=greet__pb2.FileUploadRequest.SerializeToString,
                response_deserializer=greet__pb2.FileUploadResponse.FromString,
                _registered_method=True)


class GreetServiceServicer(object):
    """A class to show you how you can greet someone.
    """

    def GreetMe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToNotifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserActions(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileUpload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GreetMe': grpc.unary_unary_rpc_method_handler(
                    servicer.GreetMe,
                    request_deserializer=greet__pb2.GreetMeRequest.FromString,
                    response_serializer=greet__pb2.GreetMeResponse.SerializeToString,
            ),
            'SubscribeToNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToNotifications,
                    request_deserializer=greet__pb2.SubscribeToNotificationsRequest.FromString,
                    response_serializer=greet__pb2.SubscribeToNotificationsResponse.SerializeToString,
            ),
            'UserActions': grpc.stream_unary_rpc_method_handler(
                    servicer.UserActions,
                    request_deserializer=greet__pb2.UserActionsRequest.FromString,
                    response_serializer=greet__pb2.UserActionsResponse.SerializeToString,
            ),
            'FileUpload': grpc.stream_stream_rpc_method_handler(
                    servicer.FileUpload,
                    request_deserializer=greet__pb2.FileUploadRequest.FromString,
                    response_serializer=greet__pb2.FileUploadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'greet.GreetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('greet.GreetService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GreetService(object):
    """A class to show you how you can greet someone.
    """

    @staticmethod
    def GreetMe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/greet.GreetService/GreetMe',
            greet__pb2.GreetMeRequest.SerializeToString,
            greet__pb2.GreetMeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/greet.GreetService/SubscribeToNotifications',
            greet__pb2.SubscribeToNotificationsRequest.SerializeToString,
            greet__pb2.SubscribeToNotificationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserActions(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/greet.GreetService/UserActions',
            greet__pb2.UserActionsRequest.SerializeToString,
            greet__pb2.UserActionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FileUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/greet.GreetService/FileUpload',
            greet__pb2.FileUploadRequest.SerializeToString,
            greet__pb2.FileUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
